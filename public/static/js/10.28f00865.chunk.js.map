{"version":3,"sources":["Books/pages/UpdateChapter.js"],"names":["UpdateChapter","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedPlace","setLoadedPlace","cId","useParams","caid","history","useHistory","useForm","chapterName","value","isValid","chapterNumber","description","formState","InputHandler","setFormData","useEffect","a","process","responseData","Chapter","fetchPlace","placeUpdateSubmitHandler","event","preventDefault","formData","FormData","append","inputs","solutionLink","push","className","Fragment","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_MINLENGTH","errorText","onInput","initialValue","initialValid","center"],"mappings":"2RAsKeA,UArJO,WACLC,qBAAWC,KAAxB,IADwB,EAE8BC,cAA9CC,EAFgB,EAEhBA,UAAWC,EAFK,EAELA,MAAOC,EAFF,EAEEA,YAAaC,EAFf,EAEeA,WAFf,EAGcC,qBAHd,mBAGjBC,EAHiB,KAGJC,EAHI,KAIlBC,EAAMC,cAAYC,KAClBC,EAAUC,cALQ,EAQuBC,YAC3C,CACIC,YAAa,CACTC,MAAO,GACPC,SAAS,GAEbC,cAAe,CACXF,MAAO,GACPC,SAAS,GAEbE,YAAa,CACTH,MAAO,GACPC,SAAS,KAGjB,GAvBoB,mBAQjBG,EARiB,KAQNC,EARM,KAQQC,EARR,KA0BzBC,qBAAU,YACU,uCAAG,4BAAAC,EAAA,+EAEWpB,EAAY,GAAD,OAAIqB,8DAAJ,0BAAuDhB,IAF7E,OAEViB,EAFU,OAGhBlB,EAAekB,EAAaC,SAC5BL,EAAY,CACVP,YAAa,CACTC,MAAOU,EAAaC,QAAQZ,YAC5BE,SAAS,GAGbC,cAAe,CACXF,MAAOU,EAAaC,QAAQT,cAC5BD,SAAS,GAEbE,YAAa,CACTH,MAAOU,EAAaC,QAAQR,YAC5BF,SAAS,KAGd,GAnBe,yGAAH,qDAuBhBW,KACA,CAACxB,EAAaK,EAAKa,IAKtB,IAAMO,EAAwB,uCAAG,WAAMC,GAAN,eAAAN,EAAA,6DAC7BM,EAAMC,iBADuB,UAKvBC,EAAW,IAAIC,UAChBC,OAAO,cAAed,EAAUe,OAAOpB,YAAYC,OAC5DgB,EAASE,OAAO,gBAAiBd,EAAUe,OAAOjB,cAAcF,OAChEgB,EAASE,OAAO,cAAed,EAAUe,OAAOhB,YAAYH,OAC5DgB,EAASE,OAAO,eAAgBd,EAAUe,OAAOC,aAAapB,OAT7B,SAYrBZ,EAAY,GAAD,OAAIqB,8DAAJ,gCAA6DhB,GAAO,QAASuB,GAZnE,OAa/BpB,EAAQyB,KAAR,0BAAgC5B,IAbD,4GAAH,sDAkB9B,OAAGP,EAEK,yBAAKoC,UAAU,UACb,kBAAC,IAAD,OAML/B,GAAgBJ,EAarB,kBAAC,IAAMoC,SAAP,KACA,kBAAC,IAAD,CAAYpC,MAAOA,EAAOqC,QAASnC,KAChCH,GAAaK,GAChB,0BAAM+B,UAAU,aAAaG,SAAUZ,GACtC,kBAAC,IAAD,CACGa,GAAG,cACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,eACNC,WAAY,CAACC,YAAoB,IACjCC,UAAU,qCACVC,QAAS5B,EACT6B,aAAc3C,EAAYQ,YAC1BoC,cAAc,IAEZ,kBAAC,IAAD,CACFT,GAAG,gBACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,iBACNC,WAAY,CAACC,YAAoB,IACjCC,UAAU,uCACVC,QAAS5B,EACT6B,aAAc3C,EAAYW,cAC1BiC,cAAc,IAGtB,kBAAC,IAAD,CACQT,GAAG,cACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,cACNC,WAAY,CAACC,YAAoB,IACjCC,UAAU,oCACVC,QAAS5B,EACT6B,aAAc3C,EAAYY,YAC1BgC,cAAc,IAEd,0DACA,kBAAC,IAAD,CAAWC,QAAM,EAACV,GAAG,eAAeO,QAAS5B,IAK/C,kBAAC,IAAD,CAAQuB,KAAK,UAAb,kBAvDM,yBAAKN,UAAU,UACX,kBAAC,IAAD,KACR","file":"static/js/10.28f00865.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './PlaceForm.css';\r\nimport ImageUpload from '../../shared/components/FormElements/imageUpload';\r\nimport ImaUpload from '../../shared/components/FormElements/pdfUpload';\r\n\r\n\r\nconst UpdateChapter = () => {\r\n    const auth = useContext(AuthContext);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const [loadedPlace, setLoadedPlace] = useState();\r\n    const cId = useParams().caid;\r\n    const history = useHistory();\r\n\r\n\r\n    const [formState, InputHandler, setFormData] = useForm(\r\n        {\r\n            chapterName: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            chapterNumber: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            description: {\r\n                value: '',\r\n                isValid: false\r\n            }\r\n        },\r\n        false\r\n    );\r\n\r\n   useEffect(() => {\r\n       const fetchPlace = async () => {\r\n           try {\r\n          const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/books/chapter/${cId}`);\r\n          setLoadedPlace(responseData.Chapter);\r\n          setFormData({\r\n            chapterName: {\r\n                value: responseData.Chapter.chapterName,\r\n                isValid: true\r\n            },\r\n  \r\n            chapterNumber: {\r\n                value: responseData.Chapter.chapterNumber,\r\n                isValid: true\r\n            },\r\n            description: {\r\n                value: responseData.Chapter.description,\r\n                isValid: true\r\n            },\r\n\r\n        }, true\r\n        );\r\n           } catch (err) {}\r\n       } \r\n       fetchPlace();\r\n   } , [sendRequest, cId, setFormData]);\r\n\r\n    \r\n     \r\n\r\n    const placeUpdateSubmitHandler = async event => {\r\n        event.preventDefault();\r\n\r\n      try {\r\n\r\n        const formData = new FormData();\r\n    formData.append('chapterName', formState.inputs.chapterName.value);\r\n    formData.append('chapterNumber', formState.inputs.chapterNumber.value);\r\n    formData.append('description', formState.inputs.description.value);\r\n    formData.append('solutionLink', formState.inputs.solutionLink.value);\r\n  \r\n\r\n          await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/books/updatechapter/${cId}`, 'PATCH', formData);\r\n      history.push(`/books/chapters/${cId}`);\r\n    } catch (err) {}\r\n    }\r\n\r\n\r\n    if(isLoading) {\r\n        return (\r\n            <div className=\"center\">\r\n              <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n  \r\n\r\n    if (!loadedPlace && !error) {\r\n        return (\r\n            <div className=\"center\">\r\n                <Card>\r\n        <h2>Could not find place!</h2>\r\n        </Card>\r\n        </div>\r\n\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n    <React.Fragment>\r\n    <ErrorModal error={error} onClear={clearError} />\r\n    { !isLoading && loadedPlace && \r\n    <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler} > \r\n     <Input \r\n        id=\"chapterName\"\r\n        element=\"input\" \r\n        type=\"text\" \r\n        label=\"Chapter Name\" \r\n        validators={[VALIDATOR_MINLENGTH(1)]} \r\n        errorText=\"Please enter a valid Chapter Name.\" \r\n        onInput={InputHandler}\r\n        initialValue={loadedPlace.chapterName}\r\n        initialValid={true}\r\n        />\r\n          <Input \r\n        id=\"chapterNumber\"\r\n        element=\"input\" \r\n        type=\"text\" \r\n        label=\"Chapter Number\" \r\n        validators={[VALIDATOR_MINLENGTH(1)]} \r\n        errorText=\"Please enter a valid Chapter Number.\" \r\n        onInput={InputHandler}\r\n        initialValue={loadedPlace.chapterNumber}\r\n        initialValid={true}\r\n        />\r\n\r\n<Input \r\n        id=\"description\"\r\n        element=\"input\" \r\n        type=\"text\" \r\n        label=\"Description\" \r\n        validators={[VALIDATOR_MINLENGTH(1)]} \r\n        errorText=\"Please enter a valid Description.\" \r\n        onInput={InputHandler}\r\n        initialValue={loadedPlace.description}\r\n        initialValid={true}\r\n        />\r\n        <h4>Upload solution (Optional)</h4>\r\n        <ImaUpload center id=\"solutionLink\" onInput={InputHandler}/>\r\n\r\n        {/* <input type=\"file\" name=\"file\" onChange={onChangeHandler}/> */}\r\n\r\n\r\n      <Button type=\"submit\">\r\n          UPDATE PLACE\r\n      </Button>\r\n    </form>}\r\n    </React.Fragment>\r\n    );\r\n        \r\n};\r\n\r\nexport default UpdateChapter;"],"sourceRoot":""}