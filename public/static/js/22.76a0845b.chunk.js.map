{"version":3,"sources":["Pages/pages/UpdatePage.js"],"names":["UpdateChapter","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedPlace","setLoadedPlace","pId","useParams","pid","history","useHistory","useForm","urlName","value","isValid","title","description","metaDescription","formState","inputHandler","setFormData","useEffect","a","process","responseData","Page","fetchPlace","console","log","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","push","window","location","reload","className","Fragment","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_MINLENGTH","errorText","onInput","initialValue","initialValid"],"mappings":"gQA+LeA,UA9KO,WACLC,qBAAWC,KAAxB,IADwB,EAE8BC,cAA9CC,EAFgB,EAEhBA,UAAWC,EAFK,EAELA,MAAOC,EAFF,EAEEA,YAAaC,EAFf,EAEeA,WAFf,EAGcC,qBAHd,mBAGjBC,EAHiB,KAGJC,EAHI,KAIlBC,EAAMC,cAAYC,IAClBC,EAAUC,cALQ,EAQuBC,YAC3C,CACIC,QAAS,CACLC,MAAO,GACPC,SAAS,GAEbC,MAAQ,CACJF,MAAO,GACPC,SAAS,GAEbE,YAAc,CACVH,MAAO,GACPC,SAAS,GAEbG,gBAAkB,CACdJ,MAAO,GACPC,SAAS,KAGjB,GA3BoB,mBAQjBI,EARiB,KAQNC,EARM,KAQQC,EARR,KA8BzBC,qBAAU,YACU,uCAAG,4BAAAC,EAAA,+EAEWrB,EAAY,GAAD,OAAIsB,8BAAJ,2BAAwDjB,IAF9E,OAEVkB,EAFU,OAIhBnB,EAAemB,EAAaC,MAC5BL,EAAY,CACVR,QAAS,CACLC,MAAOW,EAAaC,KAAKb,QACzBE,SAAS,GAEbC,MAAO,CACHF,MAAOW,EAAaC,KAAKV,MACzBD,SAAS,GAEbE,YAAa,CACTH,MAAOW,EAAaC,KAAKT,YACzBF,SAAS,GAEbG,gBAAiB,CACbJ,MAAOW,EAAaC,KAAKR,gBACzBH,SAAS,KAGd,GAvBe,yGAAH,qDA2BhBY,KACA,CAACzB,EAAaK,EAAKc,IAGrBO,QAAQC,IAAIxB,GAEb,IAAMyB,EAAwB,uCAAG,WAAMC,GAAN,SAAAR,EAAA,6DAC7BQ,EAAMC,iBADuB,kBAGrB9B,EAAY,GAAD,OAAIsB,8BAAJ,6BAA0DjB,GAAO,QAAS0B,KAAKC,UAAU,CACxGrB,QAASM,EAAUgB,OAAOtB,QAAQC,MAClCE,MAAOG,EAAUgB,OAAOnB,MAAMF,MAC9BG,YAAaE,EAAUgB,OAAOlB,YAAYH,MAC1CI,gBAAiBC,EAAUgB,OAAOjB,gBAAgBJ,QAElD,CACA,eAAgB,qBAVS,OAe/BJ,EAAQ0B,KAAR,UACAC,OAAOC,SAASC,QAAO,GAhBQ,yGAAH,sDAqB9B,OAAGvC,EAEK,yBAAKwC,UAAU,UACb,kBAAC,IAAD,OAMLnC,GAAgBJ,EAcrB,kBAAC,IAAMwC,SAAP,KACA,kBAAC,IAAD,CAAYxC,MAAOA,EAAOyC,QAASvC,KAChCH,GAAaK,GAChB,0BAAMmC,UAAU,aAAaG,SAAUb,GACvC,yCACC,kBAAC,IAAD,CACGc,GAAG,UACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,WACNC,WAAY,CAACC,YAAoB,IACjCC,UAAU,iCACVC,QAAS/B,EACTgC,aAAc/C,EAAYQ,QAC1BwC,cAAc,IAGtB,kBAAC,IAAD,CACQT,GAAG,QACHC,QAAQ,GACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,YAAoB,IACjCC,UAAU,+BACVC,QAAS/B,EACTgC,aAAc/C,EAAYW,MAC1BqC,cAAc,IAGtB,kBAAC,IAAD,CACQT,GAAG,cACHC,QAAQ,GACRC,KAAK,OACLC,MAAM,cACNC,WAAY,CAACC,YAAoB,IACjCC,UAAU,qCACVC,QAAS/B,EACTgC,aAAc/C,EAAYY,YAC1BoC,cAAc,IAGtB,kBAAC,IAAD,CACQT,GAAG,kBACHC,QAAQ,GACRC,KAAK,OACLC,MAAM,mBACNC,WAAY,CAACC,YAAoB,IACjCC,UAAU,yCACVC,QAAS/B,EACTgC,aAAc/C,EAAYa,gBAC1BmC,cAAc,IAOhB,kBAAC,IAAD,CAAQP,KAAK,UAAb,kBArEM,yBAAKN,UAAU,UACX,kBAAC,IAAD,KACR","file":"static/js/22.76a0845b.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './PlaceForm.css';\r\nimport ImageUpload from '../../shared/components/FormElements/imageUpload';\r\nimport ImaUpload from '../../shared/components/FormElements/pdfUpload';\r\n\r\n\r\nconst UpdateChapter = () => {\r\n    const auth = useContext(AuthContext);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const [loadedPlace, setLoadedPlace] = useState();\r\n    const pId = useParams().pid;\r\n    const history = useHistory();\r\n\r\n\r\n    const [formState, inputHandler, setFormData] = useForm(\r\n        {\r\n            urlName: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            title : {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            description : {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            metaDescription : {\r\n                value: '',\r\n                isValid: false\r\n            }\r\n        },\r\n        false\r\n    );\r\n\r\n   useEffect(() => {\r\n       const fetchPlace = async () => {\r\n           try {\r\n          const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/pages/pageData/${pId}`);\r\n         \r\n          setLoadedPlace(responseData.Page);\r\n          setFormData({\r\n            urlName: {\r\n                value: responseData.Page.urlName,\r\n                isValid: true\r\n            },\r\n            title: {\r\n                value: responseData.Page.title,\r\n                isValid: true\r\n            },\r\n            description: {\r\n                value: responseData.Page.description,\r\n                isValid: true\r\n            },\r\n            metaDescription: {\r\n                value: responseData.Page.metaDescription,\r\n                isValid: true\r\n            }\r\n\r\n        }, true\r\n        );\r\n           } catch (err) {}\r\n       } \r\n       fetchPlace();\r\n   } , [sendRequest, pId, setFormData]);\r\n   \r\n    \r\n     console.log(loadedPlace);\r\n\r\n    const placeUpdateSubmitHandler = async event => {\r\n        event.preventDefault();\r\n      try {\r\n          await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/pages/updatepage/${pId}`, 'PATCH', JSON.stringify({\r\n            urlName: formState.inputs.urlName.value,\r\n            title: formState.inputs.title.value,\r\n            description: formState.inputs.description.value,\r\n            metaDescription: formState.inputs.metaDescription.value,\r\n            \r\n        }), {\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        // const pageData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/pages/${loadedPlace.pageId}`);\r\n        // const url=pageData.Page.heading+'-'+loadedPlace.pageId;\r\n      history.push(`/pages`);\r\n      window.location.reload(false);\r\n    } catch (err) {}\r\n    }\r\n\r\n\r\n    if(isLoading) {\r\n        return (\r\n            <div className=\"center\">\r\n              <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n  \r\n\r\n    if (!loadedPlace && !error) {\r\n        return (\r\n            <div className=\"center\">\r\n                <Card>\r\n        <h2>Could not find block!</h2>\r\n        </Card>\r\n        </div>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n    return (\r\n    <React.Fragment>\r\n    <ErrorModal error={error} onClear={clearError} />\r\n    { !isLoading && loadedPlace && \r\n    <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler} > \r\n    <h3>Edit Page</h3>\r\n     <Input \r\n        id=\"urlName\"\r\n        element=\"input\" \r\n        type=\"text\" \r\n        label=\"Url Name\" \r\n        validators={[VALIDATOR_MINLENGTH(1)]} \r\n        errorText=\"Please enter a valid url Name.\" \r\n        onInput={inputHandler}\r\n        initialValue={loadedPlace.urlName}\r\n        initialValid={true}\r\n        />\r\n\r\n<Input \r\n        id=\"title\"\r\n        element=\"\" \r\n        type=\"text\" \r\n        label=\"title\" \r\n        validators={[VALIDATOR_MINLENGTH(1)]} \r\n        errorText=\"Please enter a valid  title.\" \r\n        onInput={inputHandler}\r\n        initialValue={loadedPlace.title}\r\n        initialValid={true}\r\n        />\r\n\r\n<Input \r\n        id=\"description\"\r\n        element=\"\" \r\n        type=\"text\" \r\n        label=\"Description\" \r\n        validators={[VALIDATOR_MINLENGTH(1)]} \r\n        errorText=\"Please enter a valid  description.\" \r\n        onInput={inputHandler}\r\n        initialValue={loadedPlace.description}\r\n        initialValid={true}\r\n        />\r\n\r\n<Input \r\n        id=\"metaDescription\"\r\n        element=\"\" \r\n        type=\"text\" \r\n        label=\"meta Description\" \r\n        validators={[VALIDATOR_MINLENGTH(1)]} \r\n        errorText=\"Please enter a valid  metaDescription.\" \r\n        onInput={inputHandler}\r\n        initialValue={loadedPlace.metaDescription}\r\n        initialValid={true}\r\n        />\r\n         \r\n\r\n        {/* <input type=\"file\" name=\"file\" onChange={onChangeHandler}/> */}\r\n\r\n\r\n      <Button type=\"submit\">\r\n          UPDATE BLOCK\r\n      </Button>\r\n    </form>}\r\n    </React.Fragment>\r\n    );\r\n        \r\n};\r\n\r\nexport default UpdateChapter;"],"sourceRoot":""}