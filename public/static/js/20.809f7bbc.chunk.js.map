{"version":3,"sources":["Pages/pages/UpdateBlock.js"],"names":["UpdateChapter","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedPlace","setLoadedPlace","bId","useParams","bid","history","useHistory","useForm","heading","value","isValid","blockDescription","formState","inputHandler","setFormData","useEffect","a","process","responseData","Block","fetchPlace","console","log","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","pageId","pageData","url","Page","push","window","location","reload","className","Fragment","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_MINLENGTH","errorText","onInput","initialValue","initialValid"],"mappings":"gQAqJeA,UApIO,WACLC,qBAAWC,KAAxB,IADwB,EAE8BC,cAA9CC,EAFgB,EAEhBA,UAAWC,EAFK,EAELA,MAAOC,EAFF,EAEEA,YAAaC,EAFf,EAEeA,WAFf,EAGcC,qBAHd,mBAGjBC,EAHiB,KAGJC,EAHI,KAIlBC,EAAMC,cAAYC,IAClBC,EAAUC,cALQ,EAQuBC,YAC3C,CACIC,QAAS,CACLC,MAAO,GACPC,SAAS,GAEbC,iBAAmB,CACfF,MAAO,GACPC,SAAS,KAGjB,GAnBoB,mBAQjBE,EARiB,KAQNC,EARM,KAQQC,EARR,KAsBzBC,qBAAU,YACU,uCAAG,4BAAAC,EAAA,+EAEWnB,EAAY,GAAD,OAAIoB,8BAAJ,wBAAqDf,IAF3E,OAEVgB,EAFU,OAIhBjB,EAAeiB,EAAaC,OAC5BL,EAAY,CACVN,QAAS,CACLC,MAAOS,EAAaC,MAAMX,QAC1BE,SAAS,GAEbC,iBAAkB,CACdF,MAAOS,EAAaC,MAAMR,iBAC1BD,SAAS,KAGd,GAfe,yGAAH,qDAmBhBU,KACA,CAACvB,EAAaK,EAAKY,IAGrBO,QAAQC,IAAItB,GAEb,IAAMuB,EAAwB,uCAAG,WAAMC,GAAN,iBAAAR,EAAA,6DAC7BQ,EAAMC,iBADuB,kBAGrB5B,EAAY,GAAD,OAAIoB,8BAAJ,8BAA2Df,GAAO,QAASwB,KAAKC,UAAU,CACzGnB,QAASI,EAAUgB,OAAOpB,QAAQC,MAClCE,iBAAkBC,EAAUgB,OAAOjB,iBAAiBF,QAEpD,CACA,eAAgB,qBARS,uBAWNZ,EAAY,GAAD,OAAIoB,8BAAJ,kBAA+CjB,EAAY6B,SAXhE,OAWvBC,EAXuB,OAYvBC,EAAID,EAASE,KAAKxB,QAAQ,IAAIR,EAAY6B,OAClDxB,EAAQ4B,KAAR,iBAAuBF,IACvBG,OAAOC,SAASC,QAAO,GAdQ,4GAAH,sDAmB9B,OAAGzC,EAEK,yBAAK0C,UAAU,UACb,kBAAC,IAAD,OAMLrC,GAAgBJ,EAcrB,kBAAC,IAAM0C,SAAP,KACA,kBAAC,IAAD,CAAY1C,MAAOA,EAAO2C,QAASzC,KAChCH,GAAaK,GAChB,0BAAMqC,UAAU,aAAaG,SAAUjB,GACjC,0CACL,kBAAC,IAAD,CACGkB,GAAG,UACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,UACNC,WAAY,CAACC,YAAoB,IACjCC,UAAU,gCACVC,QAASnC,EACToC,aAAcjD,EAAYQ,QAC1B0C,cAAc,IAGtB,kBAAC,IAAD,CACQT,GAAG,mBACHC,QAAQ,GACRC,KAAK,OACLC,MAAM,oBACNC,WAAY,CAACC,YAAoB,IACjCC,UAAU,0CACVC,QAASnC,EACToC,aAAcjD,EAAYW,iBAC1BuC,cAAc,IAOhB,kBAAC,IAAD,CAAQP,KAAK,UAAb,kBA7CM,yBAAKN,UAAU,UACX,kBAAC,IAAD,KACR","file":"static/js/20.809f7bbc.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './PlaceForm.css';\r\nimport ImageUpload from '../../shared/components/FormElements/imageUpload';\r\nimport ImaUpload from '../../shared/components/FormElements/pdfUpload';\r\n\r\n\r\nconst UpdateChapter = () => {\r\n    const auth = useContext(AuthContext);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const [loadedPlace, setLoadedPlace] = useState();\r\n    const bId = useParams().bid;\r\n    const history = useHistory();\r\n\r\n\r\n    const [formState, inputHandler, setFormData] = useForm(\r\n        {\r\n            heading: {\r\n                value: '',\r\n                isValid: false\r\n            },\r\n            blockDescription : {\r\n                value: '',\r\n                isValid: false\r\n            }\r\n        },\r\n        false\r\n    );\r\n\r\n   useEffect(() => {\r\n       const fetchPlace = async () => {\r\n           try {\r\n          const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/pages/block/${bId}`);\r\n         \r\n          setLoadedPlace(responseData.Block);\r\n          setFormData({\r\n            heading: {\r\n                value: responseData.Block.heading,\r\n                isValid: true\r\n            },\r\n            blockDescription: {\r\n                value: responseData.Block.blockDescription,\r\n                isValid: true\r\n            }\r\n\r\n        }, true\r\n        );\r\n           } catch (err) {}\r\n       } \r\n       fetchPlace();\r\n   } , [sendRequest, bId, setFormData]);\r\n   \r\n    \r\n     console.log(loadedPlace);\r\n\r\n    const placeUpdateSubmitHandler = async event => {\r\n        event.preventDefault();\r\n      try {\r\n          await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/pages/updateblock/${bId}`, 'PATCH', JSON.stringify({\r\n            heading: formState.inputs.heading.value,\r\n            blockDescription: formState.inputs.blockDescription.value,\r\n            \r\n        }), {\r\n            'Content-Type': 'application/json'\r\n        });\r\n\r\n        const pageData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/pages/${loadedPlace.pageId}`);\r\n        const url=pageData.Page.heading+'-'+loadedPlace.pageId;\r\n      history.push(`/pages/${url}`);\r\n      window.location.reload(false);\r\n    } catch (err) {}\r\n    }\r\n\r\n\r\n    if(isLoading) {\r\n        return (\r\n            <div className=\"center\">\r\n              <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n  \r\n\r\n    if (!loadedPlace && !error) {\r\n        return (\r\n            <div className=\"center\">\r\n                <Card>\r\n        <h2>Could not find block!</h2>\r\n        </Card>\r\n        </div>\r\n\r\n        );\r\n    }\r\n\r\n\r\n\r\n    return (\r\n    <React.Fragment>\r\n    <ErrorModal error={error} onClear={clearError} />\r\n    { !isLoading && loadedPlace && \r\n    <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler} >\r\n          <h2>Edit Block</h2> \r\n     <Input \r\n        id=\"heading\"\r\n        element=\"input\" \r\n        type=\"text\" \r\n        label=\"Heading\" \r\n        validators={[VALIDATOR_MINLENGTH(1)]} \r\n        errorText=\"Please enter a valid Heading.\" \r\n        onInput={inputHandler}\r\n        initialValue={loadedPlace.heading}\r\n        initialValid={true}\r\n        />\r\n\r\n<Input \r\n        id=\"blockDescription\"\r\n        element=\"\" \r\n        type=\"text\" \r\n        label=\"Block Description\" \r\n        validators={[VALIDATOR_MINLENGTH(1)]} \r\n        errorText=\"Please enter a valid block description.\" \r\n        onInput={inputHandler}\r\n        initialValue={loadedPlace.blockDescription}\r\n        initialValid={true}\r\n        />\r\n         \r\n\r\n        {/* <input type=\"file\" name=\"file\" onChange={onChangeHandler}/> */}\r\n\r\n\r\n      <Button type=\"submit\">\r\n          UPDATE BLOCK\r\n      </Button>\r\n    </form>}\r\n    </React.Fragment>\r\n    );\r\n        \r\n};\r\n\r\nexport default UpdateChapter;"],"sourceRoot":""}