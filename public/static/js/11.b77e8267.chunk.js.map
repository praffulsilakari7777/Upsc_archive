{"version":3,"sources":["Books/pages/UpdateSubject.js"],"names":["UpdateChapter","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedPlace","setLoadedPlace","sId","useParams","sid","history","useHistory","useForm","subjectName","value","isValid","formState","inputHandler","setFormData","useEffect","a","process","responseData","Subject","fetchPlace","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","push","className","Fragment","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_MINLENGTH","errorText","onInput","initialValue","initialValid"],"mappings":"uRAyHeA,UAxGO,WACLC,qBAAWC,KAAxB,IADwB,EAE8BC,cAA9CC,EAFgB,EAEhBA,UAAWC,EAFK,EAELA,MAAOC,EAFF,EAEEA,YAAaC,EAFf,EAEeA,WAFf,EAGcC,qBAHd,mBAGjBC,EAHiB,KAGJC,EAHI,KAIlBC,EAAMC,cAAYC,IAClBC,EAAUC,cALQ,EAQuBC,YAC3C,CACIC,YAAa,CACTC,MAAO,GACPC,SAAS,KAGjB,GAfoB,mBAQjBC,EARiB,KAQNC,EARM,KAQQC,EARR,KAkBzBC,qBAAU,YACU,uCAAG,4BAAAC,EAAA,+EAEWlB,EAAY,GAAD,OAAImB,8DAAJ,0BAAuDd,IAF7E,OAEVe,EAFU,OAGhBhB,EAAegB,EAAaC,SAC5BL,EAAY,CACVL,YAAa,CACTC,MAAOQ,EAAaC,QAAQV,YAC5BE,SAAS,KAGd,GAVe,yGAAH,qDAchBS,KACA,CAACtB,EAAaK,EAAKW,IAKtB,IAAMO,EAAwB,uCAAG,WAAMC,GAAN,SAAAN,EAAA,6DAC7BM,EAAMC,iBADuB,kBAGrBzB,EAAY,GAAD,OAAImB,8DAAJ,gCAA6Dd,GAAO,QAASqB,KAAKC,UAAU,CAC3GhB,YAAaG,EAAUc,OAAOjB,YAAYC,QAE1C,CACA,eAAgB,qBAPS,OAS/BJ,EAAQqB,KAAK,KATkB,uGAAH,sDAc9B,OAAG/B,EAEK,yBAAKgC,UAAU,UACb,kBAAC,IAAD,OAML3B,GAAgBJ,EAarB,kBAAC,IAAMgC,SAAP,KACA,kBAAC,IAAD,CAAYhC,MAAOA,EAAOiC,QAAS/B,KAChCH,GAAaK,GAChB,0BAAM2B,UAAU,aAAaG,SAAUV,GACtC,kBAAC,IAAD,CACGW,GAAG,cACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,eACNC,WAAY,CAACC,YAAoB,IACjCC,UAAU,qCACVC,QAAS1B,EACT2B,aAAcvC,EAAYQ,YAC1BgC,cAAc,IAOhB,kBAAC,IAAD,CAAQP,KAAK,UAAb,oBA/BM,yBAAKN,UAAU,UACX,kBAAC,IAAD,KACR","file":"static/js/11.b77e8267.chunk.js","sourcesContent":["import React, { useEffect, useState, useContext } from 'react';\r\nimport { useParams, useHistory } from 'react-router-dom';\r\n\r\nimport Input from '../../shared/components/FormElements/Input';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\r\nimport { useForm } from '../../shared/hooks/form-hook';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport { AuthContext } from '../../shared/context/auth-context';\r\nimport './PlaceForm.css';\r\nimport ImageUpload from '../../shared/components/FormElements/imageUpload';\r\nimport ImaUpload from '../../shared/components/FormElements/pdfUpload';\r\n\r\n\r\nconst UpdateChapter = () => {\r\n    const auth = useContext(AuthContext);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const [loadedPlace, setLoadedPlace] = useState();\r\n    const sId = useParams().sid;\r\n    const history = useHistory();\r\n\r\n\r\n    const [formState, inputHandler, setFormData] = useForm(\r\n        {\r\n            subjectName: {\r\n                value: '',\r\n                isValid: false\r\n            }\r\n        },\r\n        false\r\n    );\r\n\r\n   useEffect(() => {\r\n       const fetchPlace = async () => {\r\n           try {\r\n          const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/books/subject/${sId}`);\r\n          setLoadedPlace(responseData.Subject);\r\n          setFormData({\r\n            subjectName: {\r\n                value: responseData.Subject.subjectName,\r\n                isValid: true\r\n            }\r\n\r\n        }, true\r\n        );\r\n           } catch (err) {}\r\n       } \r\n       fetchPlace();\r\n   } , [sendRequest, sId, setFormData]);\r\n\r\n    \r\n     \r\n\r\n    const placeUpdateSubmitHandler = async event => {\r\n        event.preventDefault();\r\n      try {\r\n          await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/books/updatesubject/${sId}`, 'PATCH', JSON.stringify({\r\n            subjectName: formState.inputs.subjectName.value,\r\n            \r\n        }), {\r\n            'Content-Type': 'application/json'\r\n        });\r\n      history.push('/');\r\n    } catch (err) {}\r\n    }\r\n\r\n\r\n    if(isLoading) {\r\n        return (\r\n            <div className=\"center\">\r\n              <LoadingSpinner />\r\n            </div>\r\n        );\r\n    }\r\n  \r\n\r\n    if (!loadedPlace && !error) {\r\n        return (\r\n            <div className=\"center\">\r\n                <Card>\r\n        <h2>Could not find place!</h2>\r\n        </Card>\r\n        </div>\r\n\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n    <React.Fragment>\r\n    <ErrorModal error={error} onClear={clearError} />\r\n    { !isLoading && loadedPlace && \r\n    <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler} > \r\n     <Input \r\n        id=\"subjectName\"\r\n        element=\"input\" \r\n        type=\"text\" \r\n        label=\"Subject Name\" \r\n        validators={[VALIDATOR_MINLENGTH(1)]} \r\n        errorText=\"Please enter a valid Subject Name.\" \r\n        onInput={inputHandler}\r\n        initialValue={loadedPlace.subjectName}\r\n        initialValid={true}\r\n        />\r\n         \r\n\r\n        {/* <input type=\"file\" name=\"file\" onChange={onChangeHandler}/> */}\r\n\r\n\r\n      <Button type=\"submit\">\r\n          UPDATE SUBJECT\r\n      </Button>\r\n    </form>}\r\n    </React.Fragment>\r\n    );\r\n        \r\n};\r\n\r\nexport default UpdateChapter;"],"sourceRoot":""}