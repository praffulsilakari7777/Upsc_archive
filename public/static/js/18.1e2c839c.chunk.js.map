{"version":3,"sources":["Books/pages/UserBooks.js"],"names":["UserBooks","useState","loadedPlaces","setLoadedPlaces","useHttpClient","isLoading","error","sendRequest","clearError","userId","useParams","useEffect","a","process","responseData","fetchPlaces","Fragment","onClear","className","items","to"],"mappings":"+MA2CeA,UAlCG,WAAO,IAAD,EACoBC,qBADpB,mBACbC,EADa,KACCC,EADD,OAEgCC,cAA7CC,EAFa,EAEbA,UAAWC,EAFE,EAEFA,MAAOC,EAFL,EAEKA,YAAaC,EAFlB,EAEkBA,WAEjCC,EAASC,cAAYD,OAE3BE,qBAAU,YAES,uCAAG,4BAAAC,EAAA,+EAESL,EAAY,GAAD,OAAIM,8DAAJ,+BAA4DJ,IAFhF,OAEZK,EAFY,OAGlBX,EAAgBW,EAAad,WAHX,uGAAH,qDAMjBe,KACC,CAACR,EAAaE,IAOnB,OACI,kBAAC,IAAMO,SAAP,KACA,kBAAC,IAAD,CAAYV,MAAOA,EAAOW,QAAST,IACjCH,GAAc,yBAAKa,UAAU,UAC3B,kBAAC,IAAD,QAEFb,GAAaH,GAAgB,kBAAC,IAAD,CAAaiB,MAAOjB,KACjDG,IAAcH,GAAgB,kBAAC,IAAD,CAAQkB,GAAG,KAAX","file":"static/js/18.1e2c839c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport ChapterList from '../components/ChapterList';\r\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\r\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\r\nimport { useHttpClient } from '../../shared/hooks/http-hook';\r\nimport Button from '../../shared/components/FormElements/Button';\r\n\r\n\r\nconst UserBooks = () => {\r\n    const [loadedPlaces, setLoadedPlaces] = useState();\r\n   const { isLoading, error, sendRequest, clearError} = useHttpClient();\r\n  \r\n   const userId = useParams().userId;\r\n\r\n   useEffect(() => {\r\n\r\n     const fetchPlaces = async () => {\r\n     try {\r\n       const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}/books/user/chapter/${userId}`);\r\n       setLoadedPlaces(responseData.UserBooks);\r\n} catch (err) {}\r\n     };\r\n     fetchPlaces();\r\n   }, [sendRequest, userId]);\r\n\r\n   const placeDeletedHandler = deletedPlaceId => {\r\n     setLoadedPlaces(prevPlaces => prevPlaces.filter(place => place.id !== deletedPlaceId ));\r\n   };\r\n\r\n\r\n return( \r\n     <React.Fragment>\r\n     <ErrorModal error={error} onClear={clearError} />\r\n     { isLoading && (<div className=\"center\">\r\n         <LoadingSpinner />\r\n     </div>)}\r\n     {!isLoading && loadedPlaces && <ChapterList items={loadedPlaces} />}\r\n     {!isLoading && !loadedPlaces && <Button to=\"/\">Bookmark book</Button>}\r\n     </React.Fragment>\r\n );\r\n};\r\n\r\nexport default UserBooks;"],"sourceRoot":""}